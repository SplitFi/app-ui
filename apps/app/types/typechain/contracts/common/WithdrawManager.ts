/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface WithdrawManagerInterface extends utils.Interface {
  functions: {
    "totalWithdrawn(address)": FunctionFragment;
    "totalWithdrawn()": FunctionFragment;
    "withdrawn(address)": FunctionFragment;
    "withdrawn(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "totalWithdrawn(address)"
      | "totalWithdrawn()"
      | "withdrawn(address)"
      | "withdrawn(address,address)",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "totalWithdrawn(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(
    functionFragment: "totalWithdrawn(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawn(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawn(address,address)",
    data: BytesLike,
  ): Result;

  events: {
    "ERC20Withdrawal(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ERC20WithdrawalEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type ERC20WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20WithdrawalEventObject
>;

export type ERC20WithdrawalEventFilter = TypedEventFilter<ERC20WithdrawalEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface WithdrawalEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WithdrawManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WithdrawManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "totalWithdrawn(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "totalWithdrawn()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawn(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "withdrawn(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  "totalWithdrawn(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "totalWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawn(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "withdrawn(address,address)"(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    "totalWithdrawn(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "totalWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawn(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "withdrawn(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "ERC20Withdrawal(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null,
    ): ERC20WithdrawalEventFilter;
    ERC20Withdrawal(
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null,
    ): ERC20WithdrawalEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Withdrawal(address,uint256)"(
      to?: null,
      amount?: null,
    ): WithdrawalEventFilter;
    Withdrawal(to?: null, amount?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    "totalWithdrawn(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "totalWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawn(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "withdrawn(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "totalWithdrawn(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "totalWithdrawn()"(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "withdrawn(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "withdrawn(address,address)"(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
