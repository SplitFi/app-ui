/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SplitFactory,
  SplitFactoryInterface,
} from "../../contracts/SplitFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_beacon",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "CreateSplitProxy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "beacon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shares",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "bool",
        name: "metadataEditable",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
    ],
    name: "createSplit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shares",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "bool",
        name: "metadataEditable",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516111df3803806111df83398101604081905261002f916100d4565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610084565b50600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b6110cc806101136000396000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c8063715018a61162000056578063715018a614620000e05780638da5cb5b14620000ea578063f2fde38b14620000fc57600080fd5b806340a1630d146200008057806359659e9014620000b35780636eced64c14620000c7575b600080fd5b62000097620000913660046200080a565b62000113565b6040516001600160a01b03909116815260200160405180910390f35b60015462000097906001600160a01b031681565b620000de620000d83660046200080a565b620001bb565b005b620000de620003f8565b6000546001600160a01b031662000097565b620000de6200010d3660046200091a565b62000410565b6000806200012e620001288888888862000471565b620004fd565b8051602091820120604080517fff00000000000000000000000000000000000000000000000000000000000000818501523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218201526035810187905260558082019390935281518082039093018352607501905280519101209150505b95945050505050565b6000620001d6620001cf8787878762000471565b836200057b565b90506000819050806001600160a01b0316632f2ff15d826001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200022b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025191906200093f565b6000546001600160a01b03166040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015620002bd57600080fd5b505af1158015620002d2573d6000803e3d6000fd5b50505050806001600160a01b03166336568abe826001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034a91906200093f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152306024820152604401600060405180830381600087803b158015620003a257600080fd5b505af1158015620003b7573d6000803e3d6000fd5b50506040516001600160a01b03851692507f0caa339150a5043e7c190440c0a68cc80ad4e14dea001eba5aae68122c71bdb19150600090a250505050505050565b62000402620005aa565b6200040e6000620005f2565b565b6200041a620005aa565b6001600160a01b03811662000463576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6200046e81620005f2565b50565b606063db78f7d460e01b85858585604051602401620004949493929190620009ad565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60606040518060200162000511906200065a565b601f1982820381018352601f90910116604081905260015462000545916001600160a01b0390911690859060200162000a52565b60408051601f198184030181529082905262000565929160200162000a7e565b6040516020818303038152906040529050919050565b6000806200058984620004fd565b9050828151602083016000f59150813b620005a357600080fd5b5092915050565b6000546001600160a01b031633146200040e576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016200045a565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105e58062000ab283390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620006c357620006c362000668565b604052919050565b600067ffffffffffffffff821115620006e857620006e862000668565b5060051b60200190565b80356001600160a01b03811681146200070a57600080fd5b919050565b600082601f8301126200072157600080fd5b813560206200073a6200073483620006cb565b62000697565b82815260059290921b840181019181810190868411156200075a57600080fd5b8286015b848110156200077757803583529183019183016200075e565b509695505050505050565b600082601f8301126200079457600080fd5b813567ffffffffffffffff811115620007b157620007b162000668565b620007c66020601f19601f8401160162000697565b818152846020838601011115620007dc57600080fd5b816020850160208301376000918101602001919091529392505050565b803580151581146200070a57600080fd5b600080600080600060a086880312156200082357600080fd5b853567ffffffffffffffff808211156200083c57600080fd5b818801915088601f8301126200085157600080fd5b81356020620008646200073483620006cb565b82815260059290921b8401810191818101908c8411156200088457600080fd5b948201945b83861015620008ad576200089d86620006f2565b8252948201949082019062000889565b99505089013592505080821115620008c457600080fd5b620008d289838a016200070f565b95506040880135915080821115620008e957600080fd5b50620008f88882890162000782565b9350506200090960608701620007f9565b949793965091946080013592915050565b6000602082840312156200092d57600080fd5b6200093882620006f2565b9392505050565b6000602082840312156200095257600080fd5b5051919050565b60005b83811015620009765781810151838201526020016200095c565b50506000910152565b600081518084526200099981602086016020860162000959565b601f01601f19169290920160200192915050565b6080808252855190820181905260009060209060a0840190828901845b82811015620009f15781516001600160a01b031684529284019290840190600101620009ca565b5050508381038285015286518082528783019183019060005b8181101562000a285783518352928401929184019160010162000a0a565b5050848103604086015262000a3e81886200097f565b9350505050620001b2606083018415159052565b6001600160a01b038316815260406020820152600062000a7660408301846200097f565b949350505050565b6000835162000a9281846020880162000959565b83519083019062000aa881836020880162000959565b0194935050505056fe60a06040526040516105e53803806105e583398101604081905261002291610387565b61002c828261003e565b506001600160a01b031660805261047e565b610047826100fe565b6040516001600160a01b038316907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a28051156100f2576100ed826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610447565b82610211565b505050565b6100fa610288565b5050565b806001600160a01b03163b60000361013957604051631933b43b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b807fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392831617905560408051635c60da1b60e01b81529051600092841691635c60da1b9160048083019260209291908290030181865afa1580156101b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d99190610447565b9050806001600160a01b03163b6000036100fa57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610130565b6060600080846001600160a01b03168460405161022e9190610462565b600060405180830381855af49150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50909250905061027f8583836102a9565b95945050505050565b34156102a75760405163b398979f60e01b815260040160405180910390fd5b565b6060826102be576102b982610308565b610301565b81511580156102d557506001600160a01b0384163b155b156102fe57604051639996b31560e01b81526001600160a01b0385166004820152602401610130565b50805b9392505050565b8051156103185780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80516001600160a01b038116811461034857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561037e578181015183820152602001610366565b50506000910152565b6000806040838503121561039a57600080fd5b6103a383610331565b60208401519092506001600160401b03808211156103c057600080fd5b818501915085601f8301126103d457600080fd5b8151818111156103e6576103e661034d565b604051601f8201601f19908116603f0116810190838211818310171561040e5761040e61034d565b8160405282815288602084870101111561042757600080fd5b610438836020830160208801610363565b80955050505050509250929050565b60006020828403121561045957600080fd5b61030182610331565b60008251610474818460208701610363565b9190910192915050565b60805161014d61049860003960006024015261014d6000f3fe608060405261000c61000e565b005b61001e610019610020565b6100b6565b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561008d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b191906100da565b905090565b3660008037600080366000845af43d6000803e8080156100d5573d6000f35b3d6000fd5b6000602082840312156100ec57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461011057600080fd5b939250505056fea2646970667358221220d475ccdcab8f42bd867688c7fa02ea27105861805ce597e4f351c8600bca34af64736f6c63430008140033a26469706673582212207623c2375d2861edc39cf4e142afe4d7b1614aba23437b14cd50434dccbada5464736f6c63430008140033";

type SplitFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SplitFactory__factory extends ContractFactory {
  constructor(...args: SplitFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _beacon: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_beacon, overrides || {});
  }
  override deploy(
    _beacon: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_beacon, overrides || {}) as Promise<
      SplitFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SplitFactory__factory {
    return super.connect(runner) as SplitFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitFactoryInterface {
    return new Interface(_abi) as SplitFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SplitFactory {
    return new Contract(address, _abi, runner) as unknown as SplitFactory;
  }
}
