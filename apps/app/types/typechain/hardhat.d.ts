/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "PayeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PayeeManager__factory>;
    getContractFactory(
      name: "WithdrawManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawManager__factory>;
    getContractFactory(
      name: "ContractMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractMetadata__factory>;
    getContractFactory(
      name: "ContractMetadataEditable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractMetadataEditable__factory>;
    getContractFactory(
      name: "IContractMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractMetadata__factory>;
    getContractFactory(
      name: "Split",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Split__factory>;
    getContractFactory(
      name: "SplitBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SplitBase__factory>;
    getContractFactory(
      name: "SplitReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SplitReceiver__factory>;
    getContractFactory(
      name: "SplitSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SplitSender__factory>;
    getContractFactory(
      name: "SplitFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SplitFactory__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "PayeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PayeeManager>;
    getContractAt(
      name: "WithdrawManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawManager>;
    getContractAt(
      name: "ContractMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractMetadata>;
    getContractAt(
      name: "ContractMetadataEditable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractMetadataEditable>;
    getContractAt(
      name: "IContractMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractMetadata>;
    getContractAt(
      name: "Split",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Split>;
    getContractAt(
      name: "SplitBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SplitBase>;
    getContractAt(
      name: "SplitReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SplitReceiver>;
    getContractAt(
      name: "SplitSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SplitSender>;
    getContractAt(
      name: "SplitFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SplitFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
